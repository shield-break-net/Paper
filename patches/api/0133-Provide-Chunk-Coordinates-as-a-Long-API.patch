From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 4 Aug 2018 19:37:35 -0400
Subject: [PATCH] Provide Chunk Coordinates as a Long API

Allows you to easily access the chunks X/z as a long, and a method
to look up by the long key too.

diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index a25f112f4d679946ddcb5ec9b4d0a0e2d1795bd3..57976bbe682d2309f7d15d5dcd3ad7f8049429ec 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -35,6 +35,32 @@ public interface Chunk extends PersistentDataHolder {
      */
     int getZ();
 
+    // Paper start
+    /**
+     * @return The Chunks X and Z coordinates packed into a long
+     */
+    default long getChunkKey() {
+        return getChunkKey(getX(), getZ());
+    }
+
+    /**
+     * @param loc Location to get chunk key
+     * @return Location's chunk coordinates packed into a long
+     */
+    static long getChunkKey(@NotNull Location loc) {
+        return getChunkKey((int) Math.floor(loc.getX()) >> 4, (int) Math.floor(loc.getZ()) >> 4);
+    }
+
+    /**
+     * @param x X Coordinate
+     * @param z Z Coordinate
+     * @return Chunk coordinates packed into a long
+     */
+    static long getChunkKey(int x, int z) {
+        return (long) x & 0xffffffffL | ((long) z & 0xffffffffL) << 32;
+    }
+    // Paper end
+
     /**
      * Gets the world containing this chunk
      *
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index ad7e2b624d5929beee5268151bda3abe9dfbb786..9c22650c299ab063a7e558408ce6c203c79d11fd 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -182,6 +182,37 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
     @NotNull
     public Chunk getChunkAt(@NotNull Block block);
 
+    // Paper start - chunk long key API
+    /**
+     * Gets the chunk at the specified chunk key, which is the X and Z packed into a long.
+     * <p>
+     * See {@link Chunk#getChunkKey()} for easy access to the key, or you may calculate it as:
+     * long chunkKey = (long) chunkX &amp; 0xffffffffL | ((long) chunkZ &amp; 0xffffffffL) &gt;&gt; 32;
+     *
+     * @param chunkKey The Chunk Key to look up the chunk by
+     * @return The chunk at the specified key
+     */
+    @NotNull
+    default Chunk getChunkAt(long chunkKey) {
+        return getChunkAt(chunkKey, true);
+    }
+
+    /**
+     * Gets the chunk at the specified chunk key, which is the X and Z packed into a long.
+     * <p>
+     * See {@link Chunk#getChunkKey()} for easy access to the key, or you may calculate it as:
+     * long chunkKey = (long) chunkX &amp; 0xffffffffL | ((long) chunkZ &amp; 0xffffffffL) &gt;&gt; 32;
+     *
+     * @param chunkKey The Chunk Key to look up the chunk by
+     * @param generate Whether the chunk should be fully generated or not
+     * @return The chunk at the specified key
+     */
+    @NotNull
+    default Chunk getChunkAt(long chunkKey, boolean generate) {
+        return getChunkAt((int) chunkKey, (int) (chunkKey >> 32), generate);
+    }
+    // Paper end - chunk long key API
+
     /**
      * Checks if the specified {@link Chunk} is loaded
      *
