From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Owen1212055 <23108066+Owen1212055@users.noreply.github.com>
Date: Fri, 19 Mar 2021 23:25:38 -0400
Subject: [PATCH] Add TameableDeathMessageEvent


diff --git a/src/main/java/io/papermc/paper/event/entity/TameableDeathMessageEvent.java b/src/main/java/io/papermc/paper/event/entity/TameableDeathMessageEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d449b90829bca7a6ff3060b637561d8f99dc156
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/TameableDeathMessageEvent.java
@@ -0,0 +1,72 @@
+package io.papermc.paper.event.entity;
+
+import net.kyori.adventure.text.Component;
+import org.bukkit.entity.Tameable;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a {@link Tameable} dies and sends a death message.
+ */
+public class TameableDeathMessageEvent extends EntityEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private Component deathMessage;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public TameableDeathMessageEvent(@NotNull Tameable tameable, @NotNull Component deathMessage) {
+        super(tameable);
+        this.deathMessage = deathMessage;
+    }
+
+    /**
+     * Set the death message that appears to the owner of the tameable.
+     *
+     * @param deathMessage Death message to appear
+     */
+    public void deathMessage(@NotNull Component deathMessage) {
+        this.deathMessage = deathMessage;
+    }
+
+    /**
+     * Get the death message that appears to the owner of the tameable.
+     *
+     * @return Death message to appear
+     */
+    @NotNull
+    public Component deathMessage() {
+        return this.deathMessage;
+    }
+
+    @NotNull
+    @Override
+    public Tameable getEntity() {
+        return (Tameable) super.getEntity();
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
