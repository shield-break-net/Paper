From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <Blake.Galbreath@GMail.com>
Date: Fri, 27 Jul 2018 22:36:17 -0500
Subject: [PATCH] SkeletonHorse Additions


diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..f6724e6e5754996ac10888aaa92baf2dcc6134d3
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
@@ -0,0 +1,68 @@
+package com.destroystokyo.paper.event.entity;
+
+import com.google.common.collect.ImmutableList;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.SkeletonHorse;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
+
+/**
+ * Event called when a player gets close to a skeleton horse and triggers the lightning trap
+ */
+public class SkeletonHorseTrapEvent extends EntityEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private final List<HumanEntity> eligibleHumans;
+    private boolean cancelled;
+
+    @Deprecated
+    @ApiStatus.Internal
+    public SkeletonHorseTrapEvent(@NotNull SkeletonHorse horse) {
+        this(horse, ImmutableList.of());
+    }
+
+    @ApiStatus.Internal
+    public SkeletonHorseTrapEvent(@NotNull SkeletonHorse horse, @NotNull List<HumanEntity> eligibleHumans) {
+        super(horse);
+        this.eligibleHumans = eligibleHumans;
+    }
+
+    @NotNull
+    @Override
+    public SkeletonHorse getEntity() {
+        return (SkeletonHorse) super.getEntity();
+    }
+
+    @NotNull
+    public List<HumanEntity> getEligibleHumans() {
+        return this.eligibleHumans;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
+
diff --git a/src/main/java/org/bukkit/entity/SkeletonHorse.java b/src/main/java/org/bukkit/entity/SkeletonHorse.java
index a34ad28fc43bde224c39253e8479bf7bb7e8df1c..38539d5b77e06865aa65b8db0c1a3b6eaa914d03 100644
--- a/src/main/java/org/bukkit/entity/SkeletonHorse.java
+++ b/src/main/java/org/bukkit/entity/SkeletonHorse.java
@@ -43,4 +43,18 @@ public interface SkeletonHorse extends AbstractHorse {
      * @param trapTime new trap time
      */
     void setTrapTime(int trapTime);
+
+    // Paper start
+    /**
+     * @deprecated use {@link #isTrapped()}
+     */
+    @Deprecated
+    boolean isTrap();
+
+    /**
+     * @deprecated use {@link #setTrapped(boolean)}
+     */
+    @Deprecated
+    void setTrap(boolean trap);
+    // Paper end
 }
